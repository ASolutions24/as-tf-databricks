parameters:
- name: environments
  type: object
stages:
- ${{each environment in parameters.environments}}:
  - stage: Terraform_Plan_${{ environment.environmentName }}
    displayName: Terraform_Plan_${{ environment.environmentName }}
    jobs:
    # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors
    # Uses variable group approvals for stage, prod etc - SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-PRD group members can approve.
    - deployment: Terraform_Plan_${{ environment.environmentName }}
      displayName: Terraform_Plan_AzDevOpsEnv_${{ environment.environmentName }}
      environment: ${{ environment.environmentName }}
      pool:
        name: ${{ environment.terraform_pool_name }}
      #variables:
      #- group: ${{ environment.platformVariableGroupName }}
      #- group: ${{ environment.adbSPNVariableGroupName }}
      #- group: ${{ environment.variableGroupName }} # This order is important as TF State VAR is overridden with the last VG.
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - task: DownloadPackage@1
              #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
              inputs:
                packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
                feed: 'Production/as-tf-databricks'
                definition: 'AS.TF.DATABRICKS'
                version: 'latest'
                downloadPath: "$(System.ArtifactsDirectory)"
            - task: DownloadPackage@1
              inputs:
                packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
                feed: 'Production/as-tf-core-modules'
                definition: 'AS-TF-CORE-MODULES'
                version: 'latest'
                downloadPath: "$(System.ArtifactsDirectory)/tf-modules"
            - pwsh: $(System.ArtifactsDirectory)/content/scripts/Terraform-Deployment-Plan-Or-Apply.ps1 `
              workingDirectory: "$(Agent.BuildDirectory)"
              #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
              displayName: "PowerShell-Deploy-Artifact-Version"
              name: "PowerShell_Deploy_Artifact_Version"
              failOnStderr: true
              env:
                ARM_CLIENT_SECRET: 'oi18Q~ozAtm-NFQ0EeitsBUmVT6MQ6orwHl5rcUf'
                ARM_CLIENT_ID: 'e406117e-87ee-43b7-982e-03fe371a2fc5'
                ARM_SUBSCRIPTION_ID: '39aca73e-1d25-4edf-84d5-ebe0397a816b'
                ARM_TENANT_ID: '007f5007-e452-411f-ad5a-09aebef34a20'
