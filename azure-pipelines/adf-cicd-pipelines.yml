#parameters:
#  - name: environments
#    type: object
stages:
#- ${{each environment in parameters.environments}}:
- stage: Terraform_Plan
  displayName: Terraform_Plan
  jobs:
  # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors
  # For Prod only members of SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-FWD can approve.
  - deployment: Terraform_Plan_AzDevOpsEnv
    displayName: Terraform_Plan_AzDevOpsEnv
    environment: 'as_dev'
    pool:
      vmImage: windows-latest
    #variables:
    #- group: ${{ environment.variableGroupName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: DownloadPackage@1
            #condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'), ne('${{ environment.appVersionToDeploy }}', 'hotfix'))
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/as-tf-databricks'
              definition: 'AS.TF.DATABRICKS'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: DownloadPackage@1
            inputs:
              packageType: 'nuget' # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: 'Production/as-tf-core-modules'
              definition: 'AS-TF-CORE-MODULES'
              version: 'latest'
              downloadPath: '$(System.ArtifactsDirectory)/tf-modules'
          - pwsh: $(System.ArtifactsDirectory)/content/scripts/Terraform-Deployment-Plan-Or-Apply.ps1
            workingDirectory: "$(Agent.BuildDirectory)"
            displayName: "PowerShell-Deploy-Artifact-Version"
            name: "PowerShell_Deploy_Artifact_Version"
            failOnStderr: true
