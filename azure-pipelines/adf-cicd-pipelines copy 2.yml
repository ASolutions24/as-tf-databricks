#parameters:
#  - name: environments
#    type: object
stages:
#- ${{each environment in parameters.environments}}:
- stage: Terraform_Plan_${{ environment.environmentName }}
  displayName: Terraform_Plan_${{ environment.environmentName }}
  jobs:
  # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors
  # Uses variable group approvals for stage, prod etc - SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-PRD group members can approve.
  - deployment: Terraform_Plan_${{ environment.environmentName }}
    displayName: Terraform_Plan_AzDevOpsEnv_${{ environment.environmentName }}
    environment: fwd_${{ environment.environmentName }}
    pool:
      name: ${{ environment.terraform_pool_name }}
    variables:
    - group: ${{ environment.variableGroupName }}
    - group: ${{ environment.platformVariableGroupName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: DownloadPackage@1
            condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            inputs:
              packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: "$(feed)"
              definition: "$(definition)"
              version: ${{ environment.appVersionToDeploy }}
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: DownloadPackage@1
            inputs:
              packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: $(tf_modules_feed)
              definition: $(tf_modules_definition)
              version: ${{ environment.terraformModuleVersionToUse }}
              downloadPath: "$(System.ArtifactsDirectory)/tf-modules"
          - pwsh: $(System.ArtifactsDirectory)/content/scripts/Terraform-Deployment-Plan-Or-Apply.ps1 ` -environmentName ${{ environment.environmentName }} ` -Plan_Or_Apply Plan ` -appVersionToDeploy ${{ environment.appVersionToDeploy }} ` -RequiredTerraformVersion ${{ environment.requiredTerraformVersion }}
            workingDirectory: "$(Agent.BuildDirectory)"
            condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            displayName: "PowerShell-Deploy-Artifact-Version"
            name: "PowerShell_Deploy_Artifact_Version"
            failOnStderr: true
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              TF_VAR_federated_sql_password: $(federated_sql_password)
          - pwsh: $(Build.SourcesDirectory)/scripts/Terraform-Deployment-Plan-Or-Apply.ps1 ` -environmentName ${{ environment.environmentName }} ` -Plan_Or_Apply Plan ` -appVersionToDeploy ${{ environment.appVersionToDeploy }} ` -RequiredTerraformVersion ${{ environment.requiredTerraformVersion }}
            workingDirectory: "$(Agent.BuildDirectory)"
            condition: and(succeeded(), eq('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            displayName: "PowerShell-Deploy-Feature-Branch-Code"
            name: "PowerShell_Deploy_Feature_Branch_Code"
            failOnStderr: true
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              TF_VAR_federated_sql_password: $(federated_sql_password)

- stage: Terraform_Apply_${{ environment.environmentName }}
  displayName: Terraform_Apply_${{ environment.environmentName }}
  jobs:
  # Uses Azure DevOps environments approvals - fwd_tst1, fwd_tst2 etc - approval members will be fwp\contributors
  # Uses variable group approvals for stage, prod etc - SG-AA-OPS-AzureDevOps-FWD-Deployment-Approvers-PRD group members can approve.
  - deployment: Terraform_Apply_${{ environment.environmentName }}
    displayName: Terraform_Apply_AzDevOpsEnv_${{ environment.environmentName }}
    environment: fwd_${{ environment.environmentName }}
    pool:
      name: ${{ environment.terraform_pool_name }}
    variables:
    - group: ${{ environment.variableGroupName }}
    - group: ${{ environment.platformVariableGroupName }}
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - task: DownloadPackage@1
            condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            inputs:
              packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: "$(feed)"
              definition: "$(definition)"
              version: ${{ environment.appVersionToDeploy }}
              downloadPath: "$(System.ArtifactsDirectory)"
          - task: DownloadPackage@1
            inputs:
              packageType: "nuget" # 'nuget' Options: maven, npm, nuget, pypi, upack
              feed: $(tf_modules_feed)
              definition: $(tf_modules_definition)
              version: ${{ environment.terraformModuleVersionToUse }}
              downloadPath: "$(System.ArtifactsDirectory)/tf-modules"
          - pwsh: $(System.ArtifactsDirectory)/content/scripts/Terraform-Deployment-Plan-Or-Apply.ps1 ` -environmentName ${{ environment.environmentName }} ` -Plan_Or_Apply Apply ` -appVersionToDeploy ${{ environment.appVersionToDeploy }} ` -RequiredTerraformVersion ${{ environment.requiredTerraformVersion }}
            workingDirectory: "$(Agent.BuildDirectory)"
            condition: and(succeeded(), ne('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            displayName: "PowerShell-Deploy-Artifact-Version"
            failOnStderr: true
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              TF_VAR_federated_sql_password: $(federated_sql_password)
          - pwsh: $(Build.SourcesDirectory)/scripts/Terraform-Deployment-Plan-Or-Apply.ps1 ` -environmentName ${{ environment.environmentName }} ` -Plan_Or_Apply Apply ` -appVersionToDeploy ${{ environment.appVersionToDeploy }} ` -RequiredTerraformVersion ${{ environment.requiredTerraformVersion }}
            workingDirectory: "$(Agent.BuildDirectory)"
            condition: and(succeeded(), eq('${{ environment.appVersionToDeploy }}', 'deploy-feature-branch-code'))
            displayName: "PowerShell-Deploy-Feature-Branch-Code"
            failOnStderr: true
            env:
              ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
              ARM_CLIENT_ID: $(ARM_CLIENT_ID)
              TF_VAR_federated_sql_password: $(federated_sql_password)
